name: Local AI Remodeler (Ollama + Aider)

on:
  issue_comment:
    types: [created]
  workflow_dispatch:
    inputs:
      task:
        description: "Describe la remodelaci칩n a realizar"
        required: false
        default: ""

permissions:
  contents: write
  pull-requests: write
  issues: read

jobs:
  remodel:
    # Runner self-hosted en Windows
    runs-on: [self-hosted, Windows]
    if: >
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'issue_comment' &&
       (contains(github.event.comment.body, '/remodel') || contains(github.event.comment.body, '/refactor')))
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Ensure Ollama is running (Windows)
        shell: powershell
        run: |
          $ollamaExe = "C:\Users\exsal\AppData\Local\Programs\Ollama\ollama.exe"
          if (-not (Test-Path $ollamaExe)) {
            Write-Error "No se encontr칩: $ollamaExe"; exit 1
          }

          # Arranca el servidor si no est치
          $p = Get-Process -Name "ollama" -ErrorAction SilentlyContinue
          if (-not $p) {
            Start-Process -FilePath $ollamaExe -ArgumentList "serve" -WindowStyle Hidden
            Start-Sleep -Seconds 3
          }

          # Verifica y baja el modelo (idempotente)
          & $ollamaExe list | Out-Null
          try { & $ollamaExe pull qwen2.5-coder:7b } catch { }

      - name: Setup Python 3.11
        id: py
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          architecture: 'x64'

      - name: Install Aider with that Python
        shell: powershell
        run: |
          $py = "${{ steps.py.outputs.python-path }}\python.exe"
          & $py --version
          & $py -m pip install --upgrade pip
          # Versi칩n compatible con Py 3.11
          & $py -m pip install "aider-chat==0.16.0"
          & $py -m aider --version

      - name: Run Local Remodel (PowerShell)
        shell: powershell
        env:
          INPUT_TASK: ${{ github.event.inputs.task }}
          COMMENT: ${{ github.event.comment.body }}
          PYTHON_EXE: ${{ steps.py.outputs.python-path }}\python.exe
        run: |
          if (-not (Test-Path "tools/local-remodel.ps1")) {
            Write-Error "Falta tools/local-remodel.ps1"
            exit 1
          }
          powershell -ExecutionPolicy Bypass -File tools/local-remodel.ps1 -RawTask "$env:INPUT_TASK $env:COMMENT"
